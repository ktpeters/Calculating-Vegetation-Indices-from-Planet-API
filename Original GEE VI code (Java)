git clone https://earthengine.googlesource.com/users/IndianProject/test

/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var polygons = ee.FeatureCollection("projects/ee-kavinatarapeters/assets/merged_shapefiles");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Goal: Download Sentinel-2 13 bands and VI for each field
/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  return image.updateMask(mask).divide(10000);
}
// Function to calculate VIs and add date
var addVInDate = function(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI');
  var tvi= image.expression('(pow( (( (B8-B4)/(B8+B4)) +(1/2)),(1/2)))*100',{
    'B8': image.select('B8'),
    'B4': image.select('B4')
  }).rename('TVI');
  var evi= image.expression('2.5* ( (B8-B4)/ (B8+ 6*B4 - 7.5*B2 +1))',{
    'B4': image.select('B4'),
    'B8': image.select('B8'),
    'B2': image.select('B2')
  }).rename('EVI');
  var satvi= image.expression('((B11-B4)/(B11+B4+1)) * (1+1) - (B12/2)',{
    'B11': image.select('B11'),
    'B4': image.select('B4'),
    'B12': image.select('B12')
  }).rename('SATVI');
  var savi= image.expression('((B8-B4) + (1+0.5))/ (B8-B4+0.5)',{
    'B4': image.select('B4'),
    'B8': image.select('B8')
  }).rename('SAVI');
  var msi= image.expression('(B11/B8)',{
    'B11': image.select('B11'),
    'B8': image.select('B8')
  }).rename('MSI');
  
  var gndvi= image.normalizedDifference(['B8', 'B3']).rename('GNDVI');
  var grvi= image.normalizedDifference(['B3', 'B4']).rename('GRVI');
  var lswi= image.normalizedDifference(['B8', 'B11']).rename('LSWI');
  
  var msavi2 = image.expression(
  '(2 * B5 + 1 - sqrt(pow((2 * B5 + 1), 2) - 8 * (B5 - B4)) ) / 2', {
    'B5': image.select('B5'),
    'B4': image.select('B4')
  }).rename('MSAVI2');
  
  var wdvi= image.expression('B8- 0.5*B4',{
    'B4': image.select('B4'),
    'B8': image.select('B8')
  }).rename('WDVI');
  
  var bi= image.expression('sqrt((B4*B4) +(B3*B3))/2',{
    'B4': image.select('B4'),
    'B3': image.select('B3')
  }).rename('BI');
  
  var bi2= image.expression('sqrt((B4*B4) +(B3*B3)+(B8*B8))/3',{
    'B4': image.select('B4'),
    'B3': image.select('B3'),
    'B8': image.select('B8')
  }).rename('BI2');
  
  var ri= image.expression('(B4*B4)/(B3*B3*B3)',{
    'B4': image.select('B4'),
    'B3': image.select('B3'),
  }).rename('RI');
  
  var ci= image.normalizedDifference(['B4', 'B3']).rename('CI');
  var v= image.expression('(B8/B4)',{
    'B8': image.select('B8'),
    'B4': image.select('B4')
  }).rename('V');
  
  //var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI');
  //var nbr = image.normalizedDifference(['B8', 'B12']).rename('NBR');
  
  var newBands = ee.Image([ndvi, tvi, evi, satvi, savi, msi, gndvi, grvi, lswi, 
   msavi2, wdvi, bi, bi2, ri, ci, v ]);
  // Extract the date from the first 8 characters of the system:index property
  var date = ee.String(image.get('system:index')).slice(0, 8);
  return image.addBands(newBands).set('system:date', date);
};
// Function to group images by date and average them
var averageByDate = function(collection) {
  var distinctDates = collection.distinct(['system:date']);
  var filter = ee.Filter.equals({
    leftField: 'system:date',
    rightField: 'system:date'
  });
  var join = ee.Join.saveAll('matches');
  var joinCol = ee.ImageCollection(join.apply(distinctDates, collection, filter));
  var averageImages = joinCol.map(function(img) {
    var matched = ee.ImageCollection.fromImages(img.get('matches'));
    return matched.mean().set('system:date', img.get('system:date'));
  });
  return averageImages;
};
// Function to reduce the Regions
var reduceRegionsFunction = function(image) {
  var stats = image.reduceRegions({
    collection: polygons,
    reducer: ee.Reducer.mean(),
    scale: 10
  });
  return stats.map(function(feature) {
    return feature.set('date', image.get('system:date'));
  });
};
var convexHull = polygons.geometry().convexHull().buffer(50);
// Have a look at the area of interest
Map.centerObject(convexHull, 10);
Map.addLayer(convexHull, {color: 'red'}, 'Convex Hull');
//Download NDVI data, each year will be a separate file in the Google drive
for(var yr=2017; yr<2024; yr=yr+1){
  
  // Parameters
  var startDate = yr+'-01-01';
  var endDate = yr+'-12-31';
  var year = yr;
  var fileName = 'VegInd' + yr;
  
  var sent2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                .filterBounds(convexHull)
                .filterDate(startDate, endDate)
                // Pre-filter to get less cloudy granules.
                .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                .map(maskS2clouds)
                .map(addVInDate);
                
                
  var averaged = averageByDate(sent2);
  
  var reduced = averaged.map(reduceRegionsFunction).flatten();
  
  // Export the Data
  Export.table.toDrive({
    collection: reduced,
    description: fileName,
    fileFormat: 'CSV'
  });
  
}
